{"version":3,"file":"static/js/684.96b2bed2.chunk.js","mappings":"wSAKMA,EAAS,CACbC,KAAM,CACJC,MAAO,KAETC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,aAAc,KAIH,SAASC,IACtB,OAAgCC,EAAAA,EAAAA,MAAhC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACIC,GAAWC,EAAAA,EAAAA,MAETC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUT,EAAoB,EAApBA,KAAMU,EAAc,EAAdA,MACtC,OAAQV,GACN,IAAK,OACH,OAAOC,EAAQS,GACjB,IAAK,QACH,OAAOP,EAASO,GAClB,IAAK,WACH,OAAOL,EAAYK,GACrB,QACE,SAIAC,EAAiB,mCAAG,WAAOC,GAAP,uFACNf,EAAae,GADP,UAClBC,EADkB,iBAGlBA,EAAIC,KAAKC,MAHS,yCAIbT,EAAS,MAJI,gCAMfU,QAAQC,IAAInB,IANG,yDAQfkB,QAAQC,IAAInB,IARG,yDAAH,sDAwBvB,OACE,0BACE,iBAAMoB,SARW,SAACC,GACpBA,EAAEC,iBACFT,EAAkB,CAAEX,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,IAPjCH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAWoBgB,MAAOjC,EAAOC,KAAMiC,aAAa,MAA/D,UACE,UAAC,KAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,eAAe,gBAAgBC,WAAW,SAASC,IAAK,EAA3F,WACE,4CACA,SAAC,IAAD,CAAWC,UAAQ,EAACrC,MAAM,OAAOsC,KAAK,OAAO7B,KAAK,OAAOU,MAAOV,EAAM8B,SAAUtB,KAChF,SAAC,IAAD,CAAWoB,UAAQ,EAACrC,MAAM,QAAQsC,KAAK,QAAQ7B,KAAK,QAAQU,MAAOR,EAAO4B,SAAUtB,KACpF,SAAC,IAAD,CAAWoB,UAAQ,EAACrC,MAAM,WAAWsC,KAAK,WAAW7B,KAAK,WAAWU,MAAON,EAAU0B,SAAUtB,KAChG,SAAC,IAAD,CAAQqB,KAAK,SAASE,QAAQ,WAAWC,MAAM,UAAUC,KAAK,QAA9D","sources":["views/RegisterView.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useRegisterUserMutation } from \"..//redux/api/usersApi\";\r\nimport { TextField, Button, Grid } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n  },\r\n  label: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    marginBottom: 15,\r\n  },\r\n};\r\n\r\nexport default function RegisterView() {\r\n  const [registerUser, isError] = useRegisterUserMutation();\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  let navigate = useNavigate();\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case \"name\":\r\n        return setName(value);\r\n      case \"email\":\r\n        return setEmail(value);\r\n      case \"password\":\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const formSubmitHandler = async (values) => {\r\n    const res = await registerUser(values);\r\n    try {\r\n      if (res.data.token) {\r\n        return navigate(\"/\");\r\n      }\r\n      return console.log(isError);\r\n    } catch {\r\n      return console.log(isError);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    formSubmitHandler({ name, email, password });\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\r\n        <Grid container direction=\"column\" justifyContent=\"space-between\" alignItems=\"center\" gap={4}>\r\n          <h1>Rergister page</h1>\r\n          <TextField required label=\"Name\" type=\"text\" name=\"name\" value={name} onChange={handleChange} />\r\n          <TextField required label=\"Email\" type=\"email\" name=\"email\" value={email} onChange={handleChange} />\r\n          <TextField required label=\"Password\" type=\"password\" name=\"password\" value={password} onChange={handleChange} />\r\n          <Button type=\"submit\" variant=\"outlined\" color=\"success\" size=\"large\">\r\n            Ok\r\n          </Button>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["styles","form","width","label","display","flexDirection","marginBottom","RegisterView","useRegisterUserMutation","registerUser","isError","useState","name","setName","email","setEmail","password","setPassword","navigate","useNavigate","handleChange","target","value","formSubmitHandler","values","res","data","token","console","log","onSubmit","e","preventDefault","style","autoComplete","container","direction","justifyContent","alignItems","gap","required","type","onChange","variant","color","size"],"sourceRoot":""}